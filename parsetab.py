
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEADRESS AND BOOL COMMA DIVIDE ELSE ELSEIF EQUAL FALSE FLOAT FOR GREATER GREATEREQUAL ID IF INT LBRAKETS LESS LESSEQUAL LITSTRING LPAREN LSQUAREB MAIN MINUS NOT NOTEQUAL NUMBER OR PLUS PRINT RBRAKETS RETURN RPAREN RSQUAREB SEMICOLON STRING TIMES TRUE WHILEexpression : expression PLUS term\n                | expression MINUS term\n                | expression TIMES term\n                | expression DIVIDE term    \n                | expression GREATER term   \n                | expression LESS term\n                | expression EQUAL term\n                | expression NOTEQUAL term\n                | expression GREATEREQUAL term\n                | expression LESSEQUAL term\n                | expression ADRESS term\n                | expression NOT termexpression : termif : IF LPAREN expression RPAREN LBRAKETS expression RBRAKETSelse : ELSE LBRAKETS expression RBRAKETSfor : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRAKETS expression RBRAKETSwhile : WHILE LPAREN expression RPAREN LBRAKETS expression RBRAKETSstatement_print : PRINTterm : factorfactor : NUMBERfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'NUMBER':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'$end':([1,2,3,4,19,20,21,22,23,24,25,26,27,28,29,30,31,],[0,-13,-19,-20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'PLUS':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[6,-13,-19,-20,6,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'MINUS':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[7,-13,-19,-20,7,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'TIMES':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[8,-13,-19,-20,8,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'DIVIDE':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[9,-13,-19,-20,9,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'GREATER':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[10,-13,-19,-20,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'LESS':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[11,-13,-19,-20,11,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'EQUAL':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[12,-13,-19,-20,12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'NOTEQUAL':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[13,-13,-19,-20,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'GREATEREQUAL':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[14,-13,-19,-20,14,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'LESSEQUAL':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[15,-13,-19,-20,15,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'ADRESS':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[16,-13,-19,-20,16,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'NOT':([1,2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[17,-13,-19,-20,17,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),'RPAREN':([2,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,],[-13,-19,-20,31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,],[1,18,]),'term':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,],[2,2,19,20,21,22,23,24,25,26,27,28,29,30,]),'factor':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_op_expression','parser_build.py',12),
  ('expression -> expression MINUS term','expression',3,'p_op_expression','parser_build.py',13),
  ('expression -> expression TIMES term','expression',3,'p_op_expression','parser_build.py',14),
  ('expression -> expression DIVIDE term','expression',3,'p_op_expression','parser_build.py',15),
  ('expression -> expression GREATER term','expression',3,'p_op_expression','parser_build.py',16),
  ('expression -> expression LESS term','expression',3,'p_op_expression','parser_build.py',17),
  ('expression -> expression EQUAL term','expression',3,'p_op_expression','parser_build.py',18),
  ('expression -> expression NOTEQUAL term','expression',3,'p_op_expression','parser_build.py',19),
  ('expression -> expression GREATEREQUAL term','expression',3,'p_op_expression','parser_build.py',20),
  ('expression -> expression LESSEQUAL term','expression',3,'p_op_expression','parser_build.py',21),
  ('expression -> expression ADRESS term','expression',3,'p_op_expression','parser_build.py',22),
  ('expression -> expression NOT term','expression',3,'p_op_expression','parser_build.py',23),
  ('expression -> term','expression',1,'p_expression_term','parser_build.py',63),
  ('if -> IF LPAREN expression RPAREN LBRAKETS expression RBRAKETS','if',7,'p_statement_if','parser_build.py',68),
  ('else -> ELSE LBRAKETS expression RBRAKETS','else',4,'p_else','parser_build.py',73),
  ('for -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LBRAKETS expression RBRAKETS','for',11,'p_for','parser_build.py',77),
  ('while -> WHILE LPAREN expression RPAREN LBRAKETS expression RBRAKETS','while',7,'p_while','parser_build.py',81),
  ('statement_print -> PRINT','statement_print',1,'p_statement_print','parser_build.py',85),
  ('term -> factor','term',1,'p_term_factor','parser_build.py',89),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser_build.py',93),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','parser_build.py',97),
]
