
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTnonassocEQUALGREATERLESSGREATEREQUALLESSEQUALleftPLUSMINUSleftTIMESDIVIDEADRESS AND BOOL COMMA DIVIDE ELSE ELSEIF EQUAL FALSE FLOAT FOR GREATER GREATEREQUAL ID IF INT LBRAKETS LESS LESSEQUAL LITSTRING LPAREN LSQUAREB MAIN MINUS NOT NOTEQUAL NUMBER OR PLUS PRINT RBRAKETS RETURN RPAREN RSQUAREB SEMICOLON STRING TIMES TRUE WHILEmain : INT MAIN LPAREN RPAREN scope\n    scope : LBRAKETS statement RBRAKETS\n        | LBRAKETS expression RBRAKETS\n\n    expression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expression\n    | LPAREN expression RPAREN\n    | termterm : type ID\n    | factor\n    \n    type : INT\n        | FLOAT\n        | STRING\n    \n    return : RETURN expression SEMICOLON\n            | RETURN SEMICOLON\n    \n    adress : term ADRESS expression SEMICOLON\n            | term ADRESS term SEMICOLON\n            | term ADRESS LITSTRING SEMICOLON\n    \n    condition : expression OR expression\n        | expression NOT expression\n        | expression AND expression\n        | expression EQUAL expression\n        | condition OR condition\n        | condition NOT condition\n        | condition AND condition\n        | expression NOTEQUAL expression\n        | expression GREATER expression\n        | expression LESS expression\n        | expression GREATEREQUAL expression\n        | expression LESSEQUAL expression\n        | LPAREN condition RPAREN\n        | NOT condition\n\n    \n    statement : expression SEMICOLON\n        | if\n        | else\n        | for\n        | while\n        | print\n        | adress\n        | return\n    \n    param : param COMMA param\n        | term\n    if : IF LPAREN condition RPAREN scope\n    | if elseif\n    | if elseelseif : ELSEIF LPAREN condition RPAREN scope\n    | elseif elseif\n    | elseif else\n    else : ELSE scopeprint : PRINT LPAREN LITSTRING RPAREN SEMICOLON\n    | PRINT LPAREN LITSTRING COMMA param RPAREN SEMICOLONfactor : NUMBER\n    for : FOR LPAREN for_initilizer SEMICOLON condition SEMICOLON expression RPAREN scope\n    \n    for_initilizer : adress\n\n    \n    while : WHILE LPAREN condition RPAREN scope\n\n    '
    
_lr_action_items = {'INT':([0,7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[2,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'$end':([1,6,31,32,],[0,-1,-2,-3,]),'MAIN':([2,],[3,]),'LPAREN':([3,7,17,19,21,22,23,24,34,35,36,37,40,43,44,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,118,],[4,17,17,44,46,47,48,17,17,17,17,17,58,17,63,63,63,63,63,63,63,63,17,17,17,17,17,17,17,17,17,63,17,]),'RPAREN':([4,26,30,41,42,51,52,53,54,55,59,64,70,71,73,77,78,92,98,100,101,102,103,104,105,106,107,108,109,110,111,115,116,121,122,],[5,-11,-53,59,-9,-10,-4,-5,-6,-7,-8,79,94,95,97,98,59,-33,-32,-24,-25,-26,-20,-21,-22,-23,-27,-28,-29,-30,-31,120,-43,124,-42,]),'LBRAKETS':([5,20,79,94,97,124,],[7,7,7,7,7,7,]),'IF':([7,],[19,]),'ELSE':([7,10,31,32,38,39,45,56,57,99,117,],[20,20,-2,-3,20,-46,-50,20,-49,-44,-47,]),'FOR':([7,],[21,]),'WHILE':([7,],[22,]),'PRINT':([7,],[23,]),'RETURN':([7,],[24,]),'FLOAT':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'STRING':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NUMBER':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'RBRAKETS':([8,9,10,11,12,13,14,15,16,18,26,30,31,32,33,38,39,42,45,50,51,52,53,54,55,56,57,59,72,74,75,76,99,113,114,117,123,125,],[31,32,-35,-36,-37,-38,-39,-40,-41,-9,-11,-53,-2,-3,-34,-45,-46,-9,-50,-16,-10,-4,-5,-6,-7,-48,-49,-8,-15,-18,-17,-19,-44,-56,-51,-47,-52,-54,]),'SEMICOLON':([9,18,24,26,30,42,49,51,52,53,54,55,59,60,61,62,67,68,74,75,76,92,95,98,100,101,102,103,104,105,106,107,108,109,110,111,112,120,],[33,-9,50,-11,-53,-9,72,-10,-4,-5,-6,-7,-8,74,75,76,93,-55,-18,-17,-19,-33,114,-32,-24,-25,-26,-20,-21,-22,-23,-27,-28,-29,-30,-31,118,123,]),'PLUS':([9,18,26,30,41,42,49,51,52,53,54,55,59,60,61,65,78,103,104,105,106,107,108,109,110,111,121,],[34,-9,-11,-53,34,-9,34,-10,-4,-5,-6,-7,-8,-9,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MINUS':([9,18,26,30,41,42,49,51,52,53,54,55,59,60,61,65,78,103,104,105,106,107,108,109,110,111,121,],[35,-9,-11,-53,35,-9,35,-10,-4,-5,-6,-7,-8,-9,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TIMES':([9,18,26,30,41,42,49,51,52,53,54,55,59,60,61,65,78,103,104,105,106,107,108,109,110,111,121,],[36,-9,-11,-53,36,-9,36,-10,36,36,-6,-7,-8,-9,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'DIVIDE':([9,18,26,30,41,42,49,51,52,53,54,55,59,60,61,65,78,103,104,105,106,107,108,109,110,111,121,],[37,-9,-11,-53,37,-9,37,-10,37,37,-6,-7,-8,-9,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'ELSEIF':([10,31,32,38,39,45,56,57,99,117,],[40,-2,-3,40,-46,-50,40,-49,-44,-47,]),'ADRESS':([18,26,30,51,69,],[43,-11,-53,-10,43,]),'ID':([25,27,28,29,],[51,-12,-13,-14,]),'OR':([26,30,42,51,52,53,54,55,59,64,65,70,73,77,78,92,98,100,101,102,103,104,105,106,107,108,109,110,111,112,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,80,83,80,80,80,83,-33,-32,-24,-25,-26,-20,-21,-22,-23,-27,-28,-29,-30,-31,80,]),'NOT':([26,30,42,44,47,51,52,53,54,55,58,59,63,64,65,66,70,73,77,78,80,81,82,92,93,98,100,101,102,103,104,105,106,107,108,109,110,111,112,],[-11,-53,-9,66,66,-10,-4,-5,-6,-7,66,-8,66,81,84,66,81,81,81,84,66,66,66,-33,66,-32,81,-25,81,-20,-21,-22,-23,-27,-28,-29,-30,-31,81,]),'AND':([26,30,42,51,52,53,54,55,59,64,65,70,73,77,78,92,98,100,101,102,103,104,105,106,107,108,109,110,111,112,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,82,85,82,82,82,85,-33,-32,82,-25,-26,-20,-21,-22,-23,-27,-28,-29,-30,-31,82,]),'EQUAL':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,86,86,]),'NOTEQUAL':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,87,87,]),'GREATER':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,88,88,]),'LESS':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,89,89,]),'GREATEREQUAL':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,90,90,]),'LESSEQUAL':([26,30,42,51,52,53,54,55,59,65,78,],[-11,-53,-9,-10,-4,-5,-6,-7,-8,91,91,]),'COMMA':([26,30,51,71,115,116,122,],[-11,-53,-10,96,119,-43,119,]),'LITSTRING':([43,48,],[62,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'scope':([5,20,79,94,97,124,],[6,45,99,113,117,125,]),'statement':([7,],[8,]),'expression':([7,17,24,34,35,36,37,43,44,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,118,],[9,41,49,52,53,54,55,61,65,65,65,78,65,65,65,65,103,104,105,106,107,108,109,110,111,65,121,]),'if':([7,],[10,]),'else':([7,10,38,56,],[11,39,57,57,]),'for':([7,],[12,]),'while':([7,],[13,]),'print':([7,],[14,]),'adress':([7,46,],[15,68,]),'return':([7,],[16,]),'term':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[18,42,42,42,42,42,42,60,42,69,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,116,42,116,]),'type':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'factor':([7,17,24,34,35,36,37,43,44,46,47,58,63,66,80,81,82,83,84,85,86,87,88,89,90,91,93,96,118,119,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'elseif':([10,38,56,],[38,56,56,]),'condition':([44,47,58,63,66,80,81,82,93,],[64,70,73,77,92,100,101,102,112,]),'for_initilizer':([46,],[67,]),'param':([96,119,],[115,122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> INT MAIN LPAREN RPAREN scope','main',5,'p_start','parser_build.py',28),
  ('scope -> LBRAKETS statement RBRAKETS','scope',3,'p_scope','parser_build.py',35),
  ('scope -> LBRAKETS expression RBRAKETS','scope',3,'p_scope','parser_build.py',36),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser_build.py',43),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser_build.py',44),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser_build.py',45),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser_build.py',46),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser_build.py',47),
  ('expression -> term','expression',1,'p_expression','parser_build.py',48),
  ('term -> type ID','term',2,'p_term','parser_build.py',57),
  ('term -> factor','term',1,'p_term','parser_build.py',58),
  ('type -> INT','type',1,'p_type','parser_build.py',68),
  ('type -> FLOAT','type',1,'p_type','parser_build.py',69),
  ('type -> STRING','type',1,'p_type','parser_build.py',70),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','parser_build.py',79),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser_build.py',80),
  ('adress -> term ADRESS expression SEMICOLON','adress',4,'p_adress','parser_build.py',88),
  ('adress -> term ADRESS term SEMICOLON','adress',4,'p_adress','parser_build.py',89),
  ('adress -> term ADRESS LITSTRING SEMICOLON','adress',4,'p_adress','parser_build.py',90),
  ('condition -> expression OR expression','condition',3,'p_condition','parser_build.py',98),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser_build.py',99),
  ('condition -> expression AND expression','condition',3,'p_condition','parser_build.py',100),
  ('condition -> expression EQUAL expression','condition',3,'p_condition','parser_build.py',101),
  ('condition -> condition OR condition','condition',3,'p_condition','parser_build.py',102),
  ('condition -> condition NOT condition','condition',3,'p_condition','parser_build.py',103),
  ('condition -> condition AND condition','condition',3,'p_condition','parser_build.py',104),
  ('condition -> expression NOTEQUAL expression','condition',3,'p_condition','parser_build.py',105),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser_build.py',106),
  ('condition -> expression LESS expression','condition',3,'p_condition','parser_build.py',107),
  ('condition -> expression GREATEREQUAL expression','condition',3,'p_condition','parser_build.py',108),
  ('condition -> expression LESSEQUAL expression','condition',3,'p_condition','parser_build.py',109),
  ('condition -> LPAREN condition RPAREN','condition',3,'p_condition','parser_build.py',110),
  ('condition -> NOT condition','condition',2,'p_condition','parser_build.py',111),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser_build.py',120),
  ('statement -> if','statement',1,'p_statement','parser_build.py',121),
  ('statement -> else','statement',1,'p_statement','parser_build.py',122),
  ('statement -> for','statement',1,'p_statement','parser_build.py',123),
  ('statement -> while','statement',1,'p_statement','parser_build.py',124),
  ('statement -> print','statement',1,'p_statement','parser_build.py',125),
  ('statement -> adress','statement',1,'p_statement','parser_build.py',126),
  ('statement -> return','statement',1,'p_statement','parser_build.py',127),
  ('param -> param COMMA param','param',3,'p_param','parser_build.py',134),
  ('param -> term','param',1,'p_param','parser_build.py',135),
  ('if -> IF LPAREN condition RPAREN scope','if',5,'p_if','parser_build.py',144),
  ('if -> if elseif','if',2,'p_if','parser_build.py',145),
  ('if -> if else','if',2,'p_if','parser_build.py',146),
  ('elseif -> ELSEIF LPAREN condition RPAREN scope','elseif',5,'p_elseif','parser_build.py',152),
  ('elseif -> elseif elseif','elseif',2,'p_elseif','parser_build.py',153),
  ('elseif -> elseif else','elseif',2,'p_elseif','parser_build.py',154),
  ('else -> ELSE scope','else',2,'p_else','parser_build.py',161),
  ('print -> PRINT LPAREN LITSTRING RPAREN SEMICOLON','print',5,'p_print','parser_build.py',166),
  ('print -> PRINT LPAREN LITSTRING COMMA param RPAREN SEMICOLON','print',7,'p_print','parser_build.py',167),
  ('factor -> NUMBER','factor',1,'p_factor','parser_build.py',176),
  ('for -> FOR LPAREN for_initilizer SEMICOLON condition SEMICOLON expression RPAREN scope','for',9,'p_for','parser_build.py',182),
  ('for_initilizer -> adress','for_initilizer',1,'p_for_initializer','parser_build.py',189),
  ('while -> WHILE LPAREN condition RPAREN scope','while',5,'p_while','parser_build.py',197),
]
